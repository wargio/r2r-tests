{
    "type": "cmd",
    "tests": [
        {
            "name": "noreturn errno",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "s main",
                "af",
                "afi~^size",
                "",
                ""
            ],
            "expected": "size: 32\n\n",
            "broken": false
        },
        {
            "name": "thumb ldr pc-rel analysis",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm",
                "e asm.bits=16",
                "wx dff80000 12000000 34000000",
                "pd 1",
                "",
                ""
            ],
            "expected": "            0x00000000      dff80000       ldr.w r0, [0x00000004]      ; [0x4:4]=18 ; 4\n\n",
            "broken": false
        },
        {
            "name": "thumb ldr pc-rel emulation",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm",
                "e asm.bits=16",
                "wx dff80000 12000000 34000000",
                "aes",
                "dr r0",
                "",
                ""
            ],
            "expected": "0x00000012\n\n",
            "broken": false
        },
        {
            "name": "bx ip eof",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm",
                "e asm.bits=16",
                "wx dff804c0 fc446047 18e0 0200",
                "af",
                "afi~size[1]",
                "",
                ""
            ],
            "expected": "8\n\n",
            "broken": false
        },
        {
            "name": "thumb ldr pc-rel analysis",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm",
                "e asm.bits=16",
                "wx 0149 014a 014b 0000 1111 2222 3333 4444 5555 6666",
                "pd 3",
                "",
                ""
            ],
            "expected": "            0x00000000      0149           ldr r1, [0x00000008]        ; [0x8:4]=0x22221111 ; 8\n            0x00000002      014a           ldr r2, [0x00000008]        ; [0x8:4]=0x22221111 ; 8\n            0x00000004      014b           ldr r3, [0x0000000c]        ; [0xc:4]=0x44443333 ; 12\n\n",
            "broken": false
        },
        {
            "name": "thumb ldr+add pc-rel analysis",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm",
                "e asm.bits=16",
                "e asm.emu=1",
                "wx 0249 024a 024b 7944 7a44 7b44 1111 2222 3333 4444 5555 6666 7777",
                "pd 6",
                "",
                ""
            ],
            "expected": "            0x00000000      0249           ldr r1, [0x0000000c]        ; [0xc:4]=0x22221111 ; 12 ; r1=0x22221111\n            0x00000002      024a           ldr r2, [0x0000000c]        ; [0xc:4]=0x22221111 ; 12 ; r2=0x22221111\n            0x00000004      024b           ldr r3, [0x00000010]        ; [0x10:4]=0x44443333 ; 16 ; r3=0x44443333\n            0x00000006      7944           add r1, pc                  ; r1=0x2222111b\n            0x00000008      7a44           add r2, pc                  ; r2=0x2222111d\n            0x0000000a      7b44           add r3, pc                  ; r3=0x44443341\n\n",
            "broken": false
        },
        {
            "name": "thumb adr pc-rel analysis",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm",
                "e asm.bits=16",
                "wx 10b5 01a0 00bf 00bf 52616461726532207465737420737472696e6700",
                "pd 1 @ 0x2",
                "",
                ""
            ],
            "expected": "            0x00000002      01a0           adr r0, 4                   ; \"Radare2 test string\" ; 0x8 ; 8\n\n",
            "broken": false
        },
        {
            "name": "pd bits override for arm",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "e asm.arch=arm",
                "e asm.bits=32",
                "wa mov r0, r0",
                "e asm.bits=16",
                "ahb 16",
                "pd 1 @a:arm @b:32",
                "pd 1 @a:arm @b:32",
                ""
            ],
            "expected": "            0x00000000      0000a0e1       mov r0, r0\n            0x00000000      0000a0e1       mov r0, r0\n\n",
            "broken": false
        },
        {
            "name": "thumb adr pc-rel analysis with newline",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm",
                "e asm.bits=16",
                "wx 10b5 01a0 00bf 00bf 5261646172653220746573740d0a00",
                "pd 1 @ 0x2",
                "",
                ""
            ],
            "expected": "            0x00000002      01a0           adr r0, 4                   ; \"Radare2 test\\r\\n\" ; 0x8 ; 8\n",
            "broken": false
        },
        {
            "name": "arm 16 BE 4 bytes instruction",
            "file": "-",
            "args": "-a arm -b 16",
            "commands": [
                "e cfg.bigendian=1",
                "wa blx 0x33b8",
                "p8 4",
                "pi 1",
                "e cfg.bigendian=0",
                "wa blx 0x33b8",
                "p8 4",
                "pi 1",
                "",
                ""
            ],
            "expected": "f003e9da\nblx 0x33b8\n03f0dae9\nblx 0x33b8\n\n",
            "broken": false
        },
        {
            "name": "arm-or-thumb visual bug",
            "file": "bins/mach0/arm-or-thumb",
            "args": "",
            "commands": [
                "",
                "e scr.interactive=1",
                "e scr.null=1",
                "Vprdfq",
                "e scr.null=0",
                "afi~^size[1]",
                "",
                ""
            ],
            "expected": "32\n\n",
            "broken": false
        },
        {
            "name": "arm-or-thumb visual bug",
            "file": "bins/mach0/arm-or-thumb",
            "args": "",
            "commands": [
                "af",
                "afi~^size[1]",
                "",
                ""
            ],
            "expected": "32\n\n",
            "broken": false
        },
        {
            "name": "ARM32 bb 0 size -- af",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "wx ff0000e2010050e30000001affffffea70009de594008de5e4139fe500f09ee5",
                "e asm.arch=arm",
                "e asm.bits=32",
                "af",
                "# .a2f",
                "#pdf",
                "afb",
                "",
                ""
            ],
            "expected": "0x00000000 0x0000000c 00:0000 12 j 0x00000010 f 0x0000000c\n0x0000000c 0x00000010 00:0000 4 j 0x00000010\n0x00000010 0x00000020 00:0000 16\n\n",
            "broken": false
        },
        {
            "name": "ARM32 bb 0 size -- a2f",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "wx ff0000e2010050e30000001affffffea70009de594008de5e4139fe500f09ee5",
                "e asm.arch=arm",
                "e asm.bits=32",
                ".a2f",
                "afb",
                "",
                ""
            ],
            "expected": "0x00000000 0x0000000c 00:0000 12 j 0x00000010 f 0x0000000c\n0x0000000c 0x00000010 00:0000 4 j 0x00000010\n0x00000010 0x00000020 00:0000 16\n\n",
            "broken": true
        },
        {
            "name": "ldr code analysis",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "",
                "wx 20c09fe5 0cc09ae7",
                "e asm.arch=arm",
                "e asm.bits=32",
                "# pd 2 - note different colors",
                "pi 2",
                "ao~type[1]",
                "ao@4~type[1]",
                "",
                ""
            ],
            "expected": "ldr ip, [pc, 0x20]\nldr ip, [sl, ip]\nload\nload\n\n",
            "broken": false
        },
        {
            "name": "endian",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm.gnu",
                "e asm.bits=32",
                "wx e59a9ae7",
                "e cfg.bigendian=false",
                "pi 1@0",
                "e cfg.bigendian=true",
                "pi 1@0",
                "",
                ""
            ],
            "expected": "ldr r9, [sl, r5, ror 21]\nldr r9, [sl, 2791]\n\n",
            "broken": false
        },
        {
            "name": "ldr thumb",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm",
                "e asm.bits=16",
                "wx 2249224a",
                "ao~^ptr",
                "ao@2~^ptr",
                "",
                ""
            ],
            "expected": "ptr: 0x0000008c\nptr: 0x0000008c\n\n",
            "broken": false
        },
        {
            "name": "arm32 bxeq lr",
            "file": "malloc://512",
            "args": "",
            "commands": [
                "",
                "e asm.calls=false",
                "e asm.arch=arm",
                "e asm.bits=32",
                "wx 021081e0 1eff2f01 0020a0e3 1eff2fe1",
                "af",
                "pd 4",
                "",
                ""
            ],
            "expected": "/ (fcn) fcn.00000000 16\n|           0x00000000      021081e0       add r1, r1, r2\n|           0x00000004      1eff2f01       bxeq lr\n|           0x00000008      0020a0e3       mov r2, 0\n\\           0x0000000c      1eff2fe1       bx lr\n\n",
            "broken": false
        },
        {
            "name": "arm32 blx switches bits",
            "file": "malloc://512",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm",
                "e asm.bits=32",
                "wx fffffffa 04210924",
                "af",
                "pi 2 @4",
                "",
                ""
            ],
            "expected": "movs r1, 4\nmovs r4, 9\n\n",
            "broken": false
        },
        {
            "name": "arm32 bx switches bits on odd location",
            "file": "malloc://512",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm",
                "e asm.bits=32",
                "e anal.armthumb=true",
                "wx 0910 a0e3 11ff 2fe1 0421 0924",
                "aae",
                "pi 2 @8",
                "",
                ""
            ],
            "expected": "movs r1, 4\nmovs r4, 9\n\n",
            "broken": false
        },
        {
            "name": "ELF ARM: thumb/arm switch",
            "file": "bins/elf/analysis/libstagefright_soft_g711dec.so",
            "args": "",
            "commands": [
                "",
                "af",
                "afi~size",
                "afi~size",
                "",
                ""
            ],
            "expected": "size: 28\nsize: 28\n\n",
            "broken": false
        },
        {
            "name": "arm: ldr code analysis",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "",
                "wx 20c09fe5",
                "wx 0cc09ae7 @ 4",
                "e asm.arch=arm",
                "e asm.bits=32",
                "# pd 2 - note different colors",
                "pi 2",
                "ao~type[1]",
                "ao@4~type[1]",
                "",
                ""
            ],
            "expected": "ldr ip, [pc, 0x20]\nldr ip, [sl, ip]\nload\nload\n\n",
            "broken": false
        },
        {
            "name": "arm: endian",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm",
                "e asm.bits=32",
                "wx e59a9ae7",
                "e cfg.bigendian=false",
                "pi 1@0",
                "e cfg.bigendian=true",
                "pi 1@0",
                "",
                ""
            ],
            "expected": "ldr sb, [sl, r5, ror 21]\nldr sb, [sl, 0xae7]\n\n",
            "broken": false
        },
        {
            "name": "arm: no afterjmp or nopskip",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm",
                "e asm.bits=64",
                "wx 1f2003d5d0d8065800021fd61f2003d5",
                "e anal.nopskip=false",
                "e anal.afterjmp=false",
                "af",
                "afl~[2]",
                "",
                ""
            ],
            "expected": "12\n\n",
            "broken": false
        },
        {
            "name": "arm: afterjmp",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm",
                "e asm.bits=64",
                "wx 1f2003d5d0d8065800021fd61f2003d5",
                "e anal.nopskip=false",
                "e anal.afterjmp=true",
                "af",
                "afl~[2]",
                "",
                ""
            ],
            "expected": "12\n\n",
            "broken": false
        },
        {
            "name": "arm: afterjmp nopskip",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm",
                "e asm.bits=64",
                "wx 1f2003d5d0d8065800021fd61f2003d5",
                "e anal.nopskip=true",
                "e anal.afterjmp=false",
                "af",
                "afl~[2]",
                "",
                ""
            ],
            "expected": "8\n\n",
            "broken": false
        },
        {
            "name": "ARM64 bl capstone",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "s 4",
                "wx 07000094",
                "e asm.arch=arm",
                "e asm.bits=64",
                "pi 1",
                "ao~jump",
                "",
                ""
            ],
            "expected": "bl 0x20\njump: 0x00000020\n\n",
            "broken": false
        },
        {
            "name": "ARM64 bl gnu",
            "file": "malloc://32",
            "args": "",
            "commands": [
                "s 4",
                "wx 07000094",
                "e asm.arch=arm.gnu",
                "e asm.bits=64",
                "pi 1",
                "ao~jump",
                "",
                ""
            ],
            "expected": "bl 0x00000020\njump: 0x00000020\n\n",
            "broken": false
        },
        {
            "name": "arm relsub \u003e256",
            "file": "malloc://800",
            "args": "",
            "commands": [
                "wx 0d039fe5",
                "e asm.arch=arm",
                "e asm.bits=32",
                "e asm.comments=false",
                "e asm.bytes=false",
                "e asm.offset=false",
                "f sym.callback=0x315",
                "pd 1",
                ""
            ],
            "expected": "                 ldr r0, [sym.callback]\n\n",
            "broken": false
        },
        {
            "name": "arm relsub \u003c256",
            "file": "-",
            "args": "",
            "commands": [
                "wx 0c009fe5",
                "e asm.arch=arm",
                "e asm.bits=32",
                "e asm.comments=false",
                "e asm.bytes=false",
                "e asm.offset=false",
                "f sym.callback=0x14",
                "pd 1",
                ""
            ],
            "expected": "                 ldr r0, [0x00000014]\n\n",
            "broken": false
        },
        {
            "name": "arm relsub",
            "file": "bins/elf/arm1.bin",
            "args": "",
            "commands": [
                "e asm.arch=arm",
                "e asm.bits=32",
                "e asm.comments=false",
                "e asm.bytes=false",
                "e asm.offset=false",
                "pd 1 @ 0x00008168",
                "pd 1 @ 0x00008204",
                "pd 1 @ 0x0000816c",
                "pd 1 @ 0x000081b0",
                "",
                ""
            ],
            "expected": "                 ldr r0, sym.main\n                 ldr r1, obj.object.6286\n                 ldr r3, sym.__libc_csu_init\n                 ldr r4, loc._d_6\n\n",
            "broken": false
        },
        {
            "name": "arm relsub",
            "file": "bins/elf/analysis/arm-ls",
            "args": "",
            "commands": [
                "e asm.arch=arm",
                "e asm.bits=32",
                "e asm.comments=false",
                "e asm.bytes=false",
                "e asm.offset=false",
                "pd 1 @ 0x00014368",
                "",
                ""
            ],
            "expected": "                 ldr r0, [main]\n\n",
            "broken": true
        },
        {
            "name": "jump sign extend : arm.cs",
            "file": "malloc://4",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm",
                "e asm.bits=32",
                "e io.va=true",
                "wx ffffffea # bl 0x80000000",
                "om 3 0x7ffffffc",
                "ao @ 0x7ffffffc~jump",
                "",
                ""
            ],
            "expected": "jump: 0x80000000\n\n",
            "broken": false
        },
        {
            "name": "jump sign extend : arm.gnu",
            "file": "malloc://4",
            "args": "",
            "commands": [
                "",
                "e asm.arch=arm.gnu",
                "e asm.bits=32",
                "e io.va=true",
                "wx ffffffea # bl 0x80000000",
                "om 3 0x7ffffffc",
                "ao @ 0x7ffffffc~jump",
                "",
                ""
            ],
            "expected": "jump: 0x80000000\n\n",
            "broken": false
        },
        {
            "name": "ELF ARM: function names",
            "file": "bins/elf/analysis/arm_32_flags0",
            "args": "",
            "commands": [
                "",
                "s sym.call_weak_fn",
                "af",
                "afi~name",
                "",
                ""
            ],
            "expected": "name: sym.call_weak_fn\n\n",
            "broken": false
        },
        {
            "name": "ELF ARM: function names 2",
            "file": "bins/elf/analysis/arm_32_flags0",
            "args": "",
            "commands": [
                "",
                "aa",
                "afl~abort",
                "",
                ""
            ],
            "expected": "0x000102bc    1 12           sym.imp.abort\n\n",
            "broken": false
        },
        {
            "name": "ELF ARM: function names 3",
            "file": "bins/elf/analysis/arm_32_flags0",
            "args": "",
            "commands": [
                "",
                "aa",
                "afl~weak",
                "",
                ""
            ],
            "expected": "0x00010304    1 28           sym.call_weak_fn\n\n",
            "broken": false
        },
        {
            "name": "ELF ARM: function names 4",
            "file": "bins/elf/analysis/arm_32_flags0",
            "args": "",
            "commands": [
                "",
                "af @@ sym*",
                "afl~weak",
                "",
                ""
            ],
            "expected": "0x00010304    1 28           sym.call_weak_fn\n\n",
            "broken": false
        },
        {
            "name": "ELF ARM: aa",
            "file": "bins/elf/analysis/arm_32_flags0",
            "args": "",
            "commands": [
                "",
                "aa",
                "f~sym?",
                "afl~?",
                "",
                ""
            ],
            "expected": "18\n15\n",
            "broken": false
        },
        {
            "name": "ELF ARM: aa2",
            "file": "bins/elf/analysis/arm_32_flags0",
            "args": "",
            "commands": [
                "",
                "aa",
                "afl",
                "",
                ""
            ],
            "expected": "0x00010278    1 12           sym._init\n0x00010298    1 12           sym.imp.printf\n0x000102a4    1 12           sym.imp.__libc_start_main\n0x000102bc    1 12           sym.imp.abort\n0x000102c8    1 44           entry0\n0x00010304    1 28           sym.call_weak_fn\n0x00010328    1 36           sym.deregister_tm_clones\n0x00010358    1 44           sym.register_tm_clones\n0x00010390    1 36           sym.__do_global_dtors_aux\n0x000103b8    4 44           entry1.init\n0x000103ec    1 28           sym.func\n0x00010408    1 40           sym.main\n0x00010434    3 88           sym.__libc_csu_init\n0x00010494    1 4            sym.__libc_csu_fini\n0x00010498    1 8            sym._fini\n",
            "broken": false
        },
        {
            "name": "ELF ARM: af @@ sym.*",
            "file": "bins/elf/analysis/arm_32_flags0",
            "args": "",
            "commands": [
                "",
                "af @@ sym.*",
                "f~sym?",
                "afl~?",
                "",
                ""
            ],
            "expected": "19\n15\n\n",
            "broken": false
        },
        {
            "name": "ELF ARM: function arg",
            "file": "bins/elf/analysis/armcall",
            "args": "",
            "commands": [
                "",
                "e asm.calls=false",
                "afr@main",
                "afva@sym.call",
                "pdf@sym.call",
                "",
                ""
            ],
            "expected": "|           ;-- $a:\n/ (fcn) sym.call 44\n|           ; var int local_8h @ fp-0x8\n|           ; CALL XREF from sym.main (0x10468)\n|           0x00010420      00482de9       push {fp, lr}\n|           0x00010424      04b08de2       add fp, sp, 4\n|           0x00010428      08d04de2       sub sp, sp, 8\n|           0x0001042c      08000be5       str r0, [local_8h]          ; 8\n|           0x00010430      14009fe5       ldr r0, loc._d_15           ; [0x1044c:4]=0x104f0 loc._d_14\n|           0x00010434      08101be5       ldr r1, [local_8h]          ; 8\n|           0x00010438      a2ffffeb       bl sym.imp.printf\n|           0x0001043c      0030a0e3       mov r3, 0\n|           0x00010440      0300a0e1       mov r0, r3\n|           0x00010444      04d04be2       sub sp, fp, 4\n\\           0x00010448      0088bde8       pop {fp, pc}\n",
            "broken": false
        },
        {
            "name": "ELF ARM: function args",
            "file": "bins/elf/analysis/armcall",
            "args": "",
            "commands": [
                "",
                "e asm.calls=false",
                "af@main",
                "afva@main",
                "pdf@main",
                "",
                ""
            ],
            "expected": "|           ;-- main:\n|           ;-- $a:\n/ (fcn) sym.main 44\n|           ; var int local_ch @ fp-0xc\n|           ; var int local_8h @ fp-0x8\n|           0x00010450      00482de9       push {fp, lr}\n|           0x00010454      04b08de2       add fp, sp, 4\n|           0x00010458      08d04de2       sub sp, sp, 8\n|           0x0001045c      08000be5       str r0, [local_8h]          ; 8\n|           0x00010460      0c100be5       str r1, [local_ch]          ; 0xc ; 12\n|           0x00010464      08001be5       ldr r0, [local_8h]          ; 8\n|           0x00010468      ecffffeb       bl sym.call\n|           0x0001046c      0030a0e1       mov r3, r0\n|           0x00010470      0300a0e1       mov r0, r3\n|           0x00010474      04d04be2       sub sp, fp, 4\n\\           0x00010478      0088bde8       pop {fp, pc}\n",
            "broken": false
        },
        {
            "name": "ELF ARM: aav",
            "file": "bins/elf/analysis/armcall",
            "args": "",
            "commands": [
                "e asm.calls=false",
                "aav",
                "pd 3 @ 0x00010328",
                "",
                ""
            ],
            "expected": "            ;-- $d:\n            0x00010328      .dword 0x000104e0 ; loc._a_13 ; sym.__libc_csu_fini\n            0x0001032c      .dword 0x00010450 ; main ; loc._a_11 ; sym.main\n            ;-- aav.0x00010330:\n            ; UNKNOWN XREF from loc._d_19 ()\n            0x00010330      .dword 0x0001047c ; loc._a_12 ; sym.__libc_csu_init\n",
            "broken": false
        },
        {
            "name": "ELF ARM: af and aav",
            "file": "bins/elf/arm1.bin",
            "args": "",
            "commands": [
                "e asm.arch=arm",
                "e asm.bits=32",
                "e asm.comments=false",
                "e asm.bytes=false",
                "e asm.offset=false",
                "e asm.flags=false",
                "af @ sym.call_gmon_start",
                "af @ entry0",
                "aav",
                "pd 1 @ 0x000081e0",
                "pd 1 @ 0x0000817c",
                "pd 1 @ 0x00008180",
                "pd 1 @ 0x00008184",
                "",
                ""
            ],
            "expected": "                 .dword 0x00084758 ; section..bss ; obj.completed.6278\n|                .dword 0x00008b00 ; loc._a_15 ; sym.__libc_csu_fini\n|                .dword 0x00008290 ; main ; sym.main\n|                .dword 0x00008b48 ; loc._a_16 ; sym.__libc_csu_init\n\n",
            "broken": false
        },
        {
            "name": "ELF ARM: aav string",
            "file": "bins/elf/arm1.bin",
            "args": "",
            "commands": [
                "e asm.arch=arm",
                "e asm.bits=32",
                "e asm.comments=false",
                "e asm.bytes=false",
                "e asm.offset=false",
                "e asm.flags=false",
                "af @ sym.deregister_tm_clones",
                "aav",
                "pd 1 @ 0x0001037c",
                "",
                ""
            ],
            "expected": "            .dword 0x0002061f ; str.:__Raspbian_4.9.2_10__4.9.2\n\n",
            "broken": true
        },
        {
            "name": "ELF ARM: vars",
            "file": "bins/elf/analysis/arm-ls",
            "args": "",
            "commands": [
                "",
                "e asm.calls=false",
                "s main",
                "af",
                "pd 1~local?",
                "",
                ""
            ],
            "expected": "12\n",
            "broken": false
        },
        {
            "name": "sp vars arm16",
            "file": "malloc://1024",
            "args": "",
            "commands": [
                "e asm.arch=arm",
                "e asm.bits=16",
                "wx f0b503af2de9000d95b0002001210222032340f2040940f2050c40f2060e0724082509261490139112921193cdf80090cdf804c0cdf808e0039404950596ddf85080cdf81880ddf84ca0cdf81ca0ddf848b0cdf820b0ddf84480cdf82480cdf82890cdf82cc0cdf830e00d940e950f96fff740ff00211090084615b0bde8000df0bd",
                "aa",
                "pdf~var",
                "",
                ""
            ],
            "expected": "|           ; var int local_0h @ sp+0x0\n|           ; var int local_4h @ sp+0x4\n|           ; var int local_8h @ sp+0x8\n|           ; var int local_ch @ sp+0xc\n|           ; var int local_10h @ sp+0x10\n|           ; var int local_14h @ sp+0x14\n|           ; var int local_18h @ sp+0x18\n|           ; var int local_1ch @ sp+0x1c\n|           ; var int local_20h @ sp+0x20\n|           ; var int local_24h @ sp+0x24\n|           ; var int local_28h @ sp+0x28\n|           ; var int local_2ch @ sp+0x2c\n|           ; var int local_30h @ sp+0x30\n|           ; var int local_34h @ sp+0x34\n|           ; var int local_38h @ sp+0x38\n|           ; var int local_3ch @ sp+0x3c\n|           ; var int local_40h @ sp+0x40\n|           ; var int local_44h @ sp+0x44\n|           ; var int local_48h @ sp+0x48\n|           ; var int local_4ch @ sp+0x4c\n|           ; var int local_50h @ sp+0x50\n\n",
            "broken": false
        },
        {
            "name": "arm thumb basic block detection with ITTE",
            "file": "bins/elf/analysis/bug-it-bb",
            "args": "",
            "commands": [
                "aaa ; s 0x00010074 ; afb",
                ""
            ],
            "expected": "0x00010074 0x0001007a 00:0000 6 j 0x0001007a f 0x0001007e 0x0001007a 0x0001007e 00:0000 4 j 0x00010080 0x0001007e 0x00010080 00:0000 2 j 0x00010080 0x00010080 0x00010082 00:0000 2\n",
            "broken": true
        }
    ]
}