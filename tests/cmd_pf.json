{
    "type": "cmd",
    "tests": [{
        "name": "pf.-x",
        "file": "-",
        "args": "",
        "commands": ["", "pf.foo xxd", "pf.", "pf.-foo", "pf.", "", ""],
        "expected": "pf.foo xxd\n\n",
        "broken": false
    }, {
        "name": "pf.-*",
        "file": "-",
        "args": "",
        "commands": ["", "pf.foo xxd", "pf.", "pf.-*", "pf.", "", ""],
        "expected": "pf.foo xxd\n\n",
        "broken": false
    }, {
        "name": "pf i foo @x:0x01",
        "file": "-",
        "args": "-a x86 -b 32",
        "commands": ["pf i foo @x:0x01", ""],
        "expected": " foo : 0x00000000 = 1\n\n",
        "broken": false
    }, {
        "name": "Cf main",
        "file": "-",
        "args": "",
        "commands": ["Cf main;C*", ""],
        "expected": "\n",
        "broken": false
    }, {
        "name": "Cf 1 main",
        "file": "-",
        "args": "",
        "commands": ["Cf 1 main;C*", ""],
        "expected": "\n",
        "broken": false
    }, {
        "name": "seteq",
        "file": "malloc://1024",
        "args": "",
        "commands": ["pf.foo xd foo bar", "pf.foo", "", ""],
        "expected": " foo : 0x00000000 = 0x00000000\n bar : 0x00000004 = 0\n\n",
        "broken": false
    }, {
        "name": "float",
        "file": "malloc://1024",
        "args": "",
        "commands": ["", "wx 00007a45457a0000", "e cfg.bigendian=0", "pf ff", "wx 00007a45457a0000", "e cfg.bigendian=1", "pf ff", "", ""],
        "expected": "0x00000000 = 4000.000000\n0x00000004 = 0.000000\n0x00000000 = 0.000000\n0x00000004 = 4000.000000\n\n",
        "broken": false
    }, {
        "name": "seteq2",
        "file": "malloc://1024",
        "args": "",
        "commands": ["pf.foo=xd foo bar", "pf.foo", "", ""],
        "expected": " foo : 0x00000000 = 0x00000000\n bar : 0x00000004 = 0\n\n",
        "broken": false
    }, {
        "name": "types",
        "file": "malloc://1024",
        "args": "",
        "commands": ["wx 00007a452a4b9a0200002a", "pf fcbiC foo bar fool beer plop", "", ""],
        "expected": "  foo : 0x00000000 = 4000.000000\n  bar : 0x00000004 = '*'\n fool : 0x00000005 = 0x4b\n beer : 0x00000006 = 666\n plop : 0x0000000a = 42\n\n",
        "broken": false
    }, {
        "name": "word types",
        "file": "malloc://1024",
        "args": "",
        "commands": ["wx efbeadde002a0000adde", "pf qw bigWord beef", "", ""],
        "expected": " bigWord : 0x00000000 = (qword)0x00002a00deadbeef\n    beef : 0x00000008 = 0xdead\n\n",
        "broken": false
    }, {
        "name": "uleb type",
        "file": "malloc://1024",
        "args": "",
        "commands": ["wx e58e26", "pf u ulebtest", "wx 00000000e58e258e2525 @ 0x10", "pf.plop [4]u ulebtest", "pf.plop @ 0x14", "pf.plop.ulebtest[2]=42 @ 0x14", ".pf.plop.ulebtest[2]=42 @ 0x14", "pf.plop @ 0x14", "pfj.plop @ 0x14", "", ""],
        "expected": " ulebtest : 0x00000000 = 624485\n ulebtest : 0x00000014 = [ 608101, 4750, 37, 0 ]\n\"wx 2a\" @ 0x00000019\n ulebtest : 0x00000014 = [ 608101, 4750, 42, 0 ]\n[{\"name\":\"ulebtest\",\"type\":\"u\",\"offset\":20,\"value\":[ \"608101\", \"4750\", \"42\", \"0\" ]}]\n\n",
        "broken": false
    }, {
        "name": "Register",
        "file": "malloc://1024",
        "args": "",
        "commands": ["e asm.bits=32", "e asm.arch = x86", "e anal.arch = x86", "dr eax=4000", "dr eip=42", "pf.plop rr (eax)reg1 (eip)reg2", "pf.plop", "pfj.plop", ""],
        "expected": " reg1 : eax : 0x00000fa0\n reg2 : eip : 0x0000002a\n[{\"name\":\"reg1\",\"type\":\"r\",\"offset\":0,\"value\":4000},{\"name\":\"reg2\",\"type\":\"r\",\"offset\":0,\"value\":42}]\n\n",
        "broken": false
    }, {
        "name": "Pointers",
        "file": "malloc://1024",
        "args": "",
        "commands": ["wx 30", "wx 20@0x04", "wx 40@0x08", "wx 2a@0x20", "w TROLL@0x30", "wx a00f@0x40", "e asm.bits=32 # pointer size", "pf.plop *z*i*w nb name blob", "pf.plop", "", ""],
        "expected": "   nb : (*0x30)0x00000000 = TROLL\n name : (*0x20)0x00000004 = 42\n blob : (*0x40)0x00000008 = 0x0fa0\n\n",
        "broken": false
    }, {
        "name": "Pointer sizes",
        "file": "malloc://1024",
        "args": "",
        "commands": ["e asm.bits=32", "wx added0dec0de5eba7ada1eab11caefbeadde0bb0", "pf p2p4p8pp2", "", ""],
        "expected": "0x00000000 = 0xdead\n0x00000002 = 0xdec0ded0\n0x00000006 = (qword)0xca11ab1eda7aba5e\n0x0000000e = 0xdeadbeef\n0x00000012 = 0xb00b\n\n",
        "broken": false
    }, {
        "name": "swap endianess",
        "file": "malloc://1024",
        "args": "",
        "commands": ["wx deadbeef00000000adde", "pf eqew bigWord beef", "", ""],
        "expected": " bigWord : 0x00000000 = (qword)0xdeadbeef00000000\n    beef : 0x00000008 = 0xdead\n\n",
        "broken": false
    }, {
        "name": "String pointer",
        "file": "malloc://1024",
        "args": "",
        "commands": ["w TROLL @0x30", "wx 30", "wx a00f @0x04", "e asm.bits=32", "pf *zi Pouet Plop", "", ""],
        "expected": " Pouet : (*0x30)0x00000000 = TROLL\n  Plop : 0x00000004 = 4000\n\n",
        "broken": false
    }, {
        "name": "timestamp",
        "file": "malloc://1024",
        "args": "",
        "commands": ["wx 321ED92D90DF5254", "pf tt troll plop", "", ""],
        "expected": " troll : 0x00000000 = Tue May 17 19:42:42 1994\n  plop : 0x00000004 = Fri Oct 31 01:02:08 2014\n\n",
        "broken": false
    }, {
        "name": "named obj",
        "file": "malloc://1024",
        "args": "",
        "commands": ["wx a00f00004b", "pf.troll ic lol cat", "pf.troll", "", ""],
        "expected": " lol : 0x00000000 = 4000\n cat : 0x00000004 = 'K'\n\n",
        "broken": false
    }, {
        "name": "array obj",
        "file": "malloc://1024",
        "args": "",
        "commands": ["wx a00f00004b2a0000004c", "pf.troll 2ic nb plop", "pf.troll", "", ""],
        "expected": "0x00000000 [0] {\n     nb : 0x00000000 = 4000\n   plop : 0x00000004 = 'K'\n}\n0x00000005 [1] {\n     nb : 0x00000005 = 42\n   plop : 0x00000009 = 'L'\n}\n\n",
        "broken": false
    }, {
        "name": "write test",
        "file": "malloc://1024",
        "args": "",
        "commands": ["wx 32000000424c41424c41424c41424c41", "pf.troll izi hu swagg plop", ".pf.troll.hu=42", ".pf.troll.swagg=B*A AA", ".pf.troll.plop=4000", "pf.troll", "", ""],
        "expected": "    hu : 0x00000000 = 42\n swagg : 0x00000004 = B*A AABLABLA\n  plop : 0x00000011 = 4000\n\n",
        "broken": false
    }, {
        "name": "write wide string",
        "file": "malloc://1024",
        "args": "",
        "commands": ["wx 42004c00410042004c00410042004c00410042004c0041000000a00f0000", "pf.troll Zi swagg plop", "pf.troll", ".pf.troll.swagg=BWA AA", ".pf.troll.plop=42", "pf.troll", "", ""],
        "expected": " swagg : 0x00000000 = BLABLABLABLA\n  plop : 0x0000001a = 4000\n swagg : 0x00000000 = BWA AA\n  plop : 0x0000000e = 42\n\n",
        "broken": false
    }, {
        "name": "fixed size variable",
        "file": "malloc://1024",
        "args": "",
        "commands": ["wx a00f0000000000002a412f00007a4500000000402a44adde00000000efbeadde00000000000000000000000040", "pf [2]i[3]b[2]f[3]c[3]w[2]q[6]x", "", ""],
        "expected": "0x00000000 = [ 4000, 0 ]\n0x00000008 = [ 0x2a, 0x41, 0x2f ]\n0x0000000b = [ 4000.000000, 0.000000 ]\n0x00000013 = [ '@', '*', 'D' ]\n0x00000016 = [ 0xdead, 0x0000, 0x0000 ]\n0x0000001c = (qword)[ 0x00000000deadbeef, 0x0000000000000000 ]\n0x0000002c = [ 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 ]\n\n",
        "broken": false
    }, {
        "name": "fixed size str, widechar, and var",
        "file": "malloc://1024",
        "args": "",
        "commands": ["w TROLL", "wx 12@0x02", "wx a00f@0x0a", "ww PLOP@0x16", "wx 2a@0x2a", "pf [10]z[3]i[10]Zb", "", ""],
        "expected": "0x00000000 = TR.LL\n0x0000000a = [ 4000, 0, 0 ]\n0x00000016 = PLOP\n0x0000002a = 0x2a\n\n",
        "broken": false
    }, {
        "name": "Enum test",
        "file": "malloc://1024",
        "args": "",
        "commands": ["e asm.bits=32", "td enum troll { BITE=42, PATE=4000};", "wx a00f", "pf E (troll)plop", "", ""],
        "expected": " plop : 0x00000000 = plop (enum troll) = 0xfa0 ; PATE\n\n",
        "broken": false
    }, {
        "name": "32 bit twice then string",
        "file": "malloc://1024",
        "args": "",
        "commands": ["e asm.bits=32", "wv 0x10", "wv 0x10 @ 4", "w hello @ 0x10", "pf ss", "pf *x*x", "pf *z*z", "", ""],
        "expected": "0x00000000 = 0x00000000 -\u003e 0x00000010 hello\n0x00000004 = 0x00000004 -\u003e 0x00000010 hello\n(*0x10)0x00000000 = 0x6c6c6568\n(*0x10)0x00000004 = 0x6c6c6568\n(*0x10)0x00000000 = hello\n(*0x10)0x00000004 = hello\n\n",
        "broken": false
    }, {
        "name": "simple union test",
        "file": "malloc://1024",
        "args": "",
        "commands": ["e asm.bits=32", "wv 0x2a", "pf 0iw integer word", "", ""],
        "expected": " integer : 0x00000000 = 42\n    word : 0x00000000 = 0x002a\n\n",
        "broken": false
    }, {
        "name": "simple nested struct",
        "file": "malloc://1024",
        "args": "",
        "commands": ["e asm.bits=32", "wx 2a", "wx a00f@0x04", "wx 2a@0x08", "wx 10@0x0a", "wx efbe@0x0e", "wx 20@0x10", "pf.troll iw integer word", "pf.plop i??i firstInt (troll)One (troll)Two secondInt", "pf.plop", "", ""],
        "expected": "  firstInt : 0x00000000 = 42\n       One : \n                struct\u003ctroll\u003e\n         integer : 0x00000004 = 4000\n            word : 0x00000008 = 0x002a\n       Two : \n                struct\u003ctroll\u003e\n         integer : 0x0000000a = 16\n            word : 0x0000000e = 0xbeef\n secondInt : 0x00000010 = 32\n\n",
        "broken": false
    }, {
        "name": "nested struct",
        "file": "malloc://1024",
        "args": "",
        "commands": ["e asm.bits=32", "wx 2a000000a00f00001234100000006416", "wx 2a0000002a@0x10", "pf.troll iw*? integer word (troll)Bah", "pf.plop i?w firstInt (troll)Boh plop", "pf.plop", "", ""],
        "expected": " firstInt : 0x00000000 = 42\n      Boh : \n                struct\u003ctroll\u003e\n         integer : 0x00000004 = 4000\n            word : 0x00000008 = 0x3412\n             Bah : (*0x10)\n                      struct\u003ctroll\u003e\n                 integer : 0x00000010 = 42\n                    word : 0x00000014 = 0x002a\n                     Bah : (*0x0) NULL\n     plop : 0x0000000e = 0x1664\n\n",
        "broken": false
    }, {
        "name": "nested unions",
        "file": "malloc://1024",
        "args": "",
        "commands": ["e asm.bits=32", "wx 2a000000a00f0000a02000000172", "pf.struct xx first second", "pf.union 0i?w integer (struct)swagg word", "pf.plop i?w firstInt (union)Boh plop", "pf.plop", "", ""],
        "expected": " firstInt : 0x00000000 = 42\n      Boh : \n                 union\u003cunion\u003e\n         integer : 0x00000004 = 4000\n           swagg : \n                      struct\u003cstruct\u003e\n                first : 0x00000004 = 0x00000fa0\n               second : 0x00000008 = 0x000020a0\n            word : 0x00000004 = 0x0fa0\n     plop : 0x0000000c = 0x7201\n\n",
        "broken": false
    }, {
        "name": "complex nested struct",
        "file": "malloc://1024",
        "args": "",
        "commands": ["e asm.bits=32", "wx 341289679a020000a00f00002a003000000014426416", "wx 800600000040@0x20", "wx 14000000641620000000@0x30", "pf.troll iw*? integer word (troll)Bah", "pf.plop i?w first (troll)Boh bwa", "pf.gobelin ww?x blah meh (plop)Buh foo", "pf.gobelin", "", ""],
        "expected": " blah : 0x00000000 = 0x1234\n  meh : 0x00000002 = 0x6789\n  Buh : \n                struct\u003cplop\u003e\n       first : 0x00000004 = 666\n         Boh : \n                      struct\u003ctroll\u003e\n                 integer : 0x00000008 = 4000\n                    word : 0x0000000c = 0x002a\n                     Bah : (*0x30)\n                            struct\u003ctroll\u003e\n                         integer : 0x00000030 = 20\n                            word : 0x00000034 = 0x1664\n                             Bah : (*0x20)\n                                  struct\u003ctroll\u003e\n                                 integer : 0x00000020 = 1664\n                                    word : 0x00000024 = 0x4000\n                                     Bah : (*0x0) NULL\n         bwa : 0x00000012 = 0x4214\n  foo : 0x00000014 = 0x00001664\n\n",
        "broken": false
    }, {
        "name": "flag for nested struct",
        "file": "malloc://1024",
        "args": "",
        "commands": ["e asm.bits=32", "wx 341289679a020000a00f00002a00300000001442", "wx 800600000040@0x20", "wx 14000000641620000000@0x30", "pf.troll iw*? integer word (troll)Bah", "pf.plop i?w first (troll)Boh bwa", "pf.gobelin ww? blah meh (plop)Buh", "pf*.gobelin", "", ""],
        "expected": "f blah=0x00000000\nf meh=0x00000002\nf plop.Buh_first=0x00000004\nf troll.Boh_integer=0x00000008\nf word=0x0000000c\nf troll.Bah_integer=0x00000030\nf word=0x00000034\nf troll.Bah_integer=0x00000020\nf word=0x00000024\nf bwa=0x00000012\n\n",
        "broken": false
    }, {
        "name": "struct size",
        "file": "malloc://256",
        "args": "",
        "commands": ["e asm.bits=32", "pf.plop wi word int", "pf.troll bciwqfdoxs:S.[4]z[2]B[4]E? byte char int word quad float hexa octal hex strp wstrp str bitfield enum (plop)struct", "pfs.troll", "", ""],
        "expected": "65\n",
        "broken": false
    }, {
        "name": "Print value only",
        "file": "bins/pe/ch22.exe",
        "args": "-nn",
        "commands": ["e asm.bits=32", "s 0x80", "pfv.pe_nt_image_headers32.optionalHeader.dataDirectory[5].virtualAddress", "", ""],
        "expected": "0x0000c000\n\n",
        "broken": false
    }, {
        "name": "print signed and unsigned values",
        "file": "malloc://1024",
        "args": "",
        "commands": ["", "wx 71776572747975696f706173646667686a6b6c7a786376626e6d71776572747975696f706173646667686a6b6c7a786376626e6d", "pf N8..N4.N2:N1..n8..n4n2n1 a b c d e f", "", ""],
        "expected": " a : 0x00000000 = 7599113487299999601\n b : 0x0000000a = 1717859169\n c : 0x0000000f = 27240\n d : 0x00000015 = 99\n e : 0x00000018 = 8751745756008901998\n f : 0x00000022 = 1935765615\n0x00000026 = 26212\n0x00000028 = 103\n\n",
        "broken": false
    }, {
        "name": "Combining flags, backtick, and var length array",
        "file": "malloc://1024",
        "args": "",
        "commands": ["e asm.bits=32", "f test 4 @ 0x20", "w SWAG", "wx 04 @ test", "wx 20 @ 0x4", "pf.plop ip int ptr", "pf [`pfv p @ test`]c", "pf [*`pfv.plop.ptr`]c", "", ""],
        "expected": "0x00000000 = [ 'S', 'W', 'A', 'G' ]\n0x00000000 = [ 'S', 'W', 'A', 'G' ]\n\n",
        "broken": false
    }, {
        "name": "print n-times a format",
        "file": "malloc://1024",
        "args": "",
        "commands": ["", "wx 71776572747975696f706173646667686a6b6c7a786376626e6d71776572747975696f706173646667686a6b6c7a786376626e6d", "pf.plop ip int ptr", "pf {2}? (plop)structname @ 0", "", ""],
        "expected": " structname : \n                struct\u003cplop\u003e\n     int : 0x00000000 = 1919252337\n     ptr : 0x00000004 = (qword)0x7361706f69757974\n structname : \n                struct\u003cplop\u003e\n     int : 0x0000000c = 1751606884\n     ptr : 0x00000010 = (qword)0x627663787a6c6b6a\n\n",
        "broken": false
    }, {
        "name": "print with byte(s) skip",
        "file": "malloc://1024",
        "args": "",
        "commands": ["", "wx 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f", "pf.abc ic...i:pii a b c d e f", "pf.abc", "", ""],
        "expected": " a : 0x00000000 = 50462976\n b : 0x00000004 = '.'\n c : 0x00000008 = 185207048\n d : 0x00000010 = (qword)0x1716151413121110\n e : 0x00000018 = 454695192\n f : 0x0000001c = 522067228\n\n",
        "broken": false
    }, {
        "name": "PE test",
        "file": "bins/pe/ch22.exe",
        "args": "-nn",
        "commands": ["e asm.bits=32", "s 0x80", "pf.pe_nt_image_headers32", "", ""],
        "expected": "      signature : 0x00000080 = PE\n     fileHeader : \n                struct\u003cpe_image_file_header\u003e\n                                   machine : 0x00000084 = machine (enum pe_machine) = 0x14c ; IMAGE_FILE_MACHINE_I386\n                          numberOfSections : 0x00000086 = 0x0004\n                             timeDateStamp : 0x00000088 = Thu Sep 11 18:21:46 2014\n                      pointerToSymbolTable : 0x0000008c = 0x00000000\n                           numberOfSymbols : 0x00000090 = 0x00000000\n                      sizeOfOptionalHeader : 0x00000094 = 0x00e0\n                           characteristics : 0x00000096 =  characteristics (bitfield) = 0x00000102 : IMAGE_FILE_EXECUTABLE_IMAGE | IMAGE_FILE_32BIT_MACHINE\n optionalHeader : \n                struct\u003cpe_image_optional_header32\u003e\n                                                   magic : 0x00000098 = magic (enum pe_magic) = 0x10b ; IMAGE_NT_OPTIONAL_HDR32_MAGIC\n                                      majorLinkerVersion : 0x0000009a = 0x0b\n                                      minorLinkerVersion : 0x0000009b = 0x00\n                                              sizeOfCode : 0x0000009c = 0x00003000\n                                   sizeOfInitializedData : 0x000000a0 = 0x00003400\n                                 sizeOfUninitializedData : 0x000000a4 = 0x00000000\n                                     addressOfEntryPoint : 0x000000a8 = 0x00004f3e\n                                              baseOfCode : 0x000000ac = 0x00002000\n                                              baseOfData : 0x000000b0 = 0x00006000\n                                               imageBase : 0x000000b4 = 0x00400000\n                                        sectionAlignment : 0x000000b8 = 0x00002000\n                                           fileAlignment : 0x000000bc = 0x00000200\n                             majorOperatingSystemVersion : 0x000000c0 = 0x0004\n                             minorOperatingSystemVersion : 0x000000c2 = 0x0000\n                                       majorImageVersion : 0x000000c4 = 0x0000\n                                       minorImageVersion : 0x000000c6 = 0x0000\n                                   majorSubsystemVersion : 0x000000c8 = 0x0006\n                                   minorSubsystemVersion : 0x000000ca = 0x0000\n                                       win32VersionValue : 0x000000cc = 0x00000000\n                                             sizeOfImage : 0x000000d0 = 0x0000e000\n                                           sizeOfHeaders : 0x000000d4 = 0x00000400\n                                                checkSum : 0x000000d8 = 0x00000000\n                                               subsystem : 0x000000dc = subsystem (enum pe_subsystem) = 0x2 ; IMAGE_SUBSYSTEM_WINDOWS_GUI\n                                      dllCharacteristics : 0x000000de =  dllCharacteristics (bitfield) = 0x00008560 : IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA | IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE | IMAGE_DLLCHARACTERISTICS_NX_COMPAT | IMAGE_DLLCHARACTERISTICS_NO_SEH | IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE\n                                      sizeOfStackReserve : 0x000000e0 = 0x00100000\n                                       sizeOfStackCommit : 0x000000e4 = 0x00001000\n                                       sizeOfHeapReserve : 0x000000e8 = 0x00100000\n                                        sizeOfHeapCommit : 0x000000ec = 0x00001000\n                                             loaderFlags : 0x000000f0 = 0x00000000\n                                     numberOfRvaAndSizes : 0x000000f4 = 0x00000010\n                                           dataDirectory : \n[\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x000000f8 = 0x00000000\n                                         size : 0x000000fc = 0x00000000\n\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x00000100 = 0x00004ef0\n                                         size : 0x00000104 = 0x0000004b\n\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x00000108 = 0x00008000\n                                         size : 0x0000010c = 0x00002e40\n\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x00000110 = 0x00000000\n                                         size : 0x00000114 = 0x00000000\n\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x00000118 = 0x00000000\n                                         size : 0x0000011c = 0x00000000\n\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x00000120 = 0x0000c000\n                                         size : 0x00000124 = 0x0000000c\n\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x00000128 = 0x00006000\n                                         size : 0x0000012c = 0x0000001c\n\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x00000130 = 0x00000000\n                                         size : 0x00000134 = 0x00000000\n\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x00000138 = 0x00000000\n                                         size : 0x0000013c = 0x00000000\n\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x00000140 = 0x00000000\n                                         size : 0x00000144 = 0x00000000\n\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x00000148 = 0x00000000\n                                         size : 0x0000014c = 0x00000000\n\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x00000150 = 0x00000000\n                                         size : 0x00000154 = 0x00000000\n\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x00000158 = 0x00002000\n                                         size : 0x0000015c = 0x00000008\n\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x00000160 = 0x00000000\n                                         size : 0x00000164 = 0x00000000\n\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x00000168 = 0x00002008\n                                         size : 0x0000016c = 0x00000048\n\n                      struct\u003cpe_image_data_directory\u003e\n                               virtualAddress : 0x00000170 = 0x00000000\n                                         size : 0x00000174 = 0x00000000\n]\n\n",
        "broken": false
    }, {
        "name": "Variable length array",
        "file": "malloc://1024",
        "args": "",
        "commands": ["e asm.bits=32", "wx 2a @ 0x20", "pf [*0x20]c", "pf [(42-21-11)/2]c", "", ""],
        "expected": "0x00000000 = [ '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '*', '.', '.', '.', '.', '.', '.', '.', '.', '.' ]\n0x00000000 = [ '.', '.', '.', '.', '.' ]\n\n",
        "broken": false
    }, {
        "name": "Infinite Recursion segfault 1",
        "file": "malloc://1024",
        "args": "",
        "commands": ["pf._NT_TIB ? (_NT_TIB)Self ; pf._NT_TIB \u003e /dev/null ; pf.", ""],
        "expected": "pf._NT_TIB ? (_NT_TIB)Self\n",
        "broken": false
    }, {
        "name": "Infinite Recursion segfault 2",
        "file": "malloc://1024",
        "args": "",
        "commands": ["pf._NT_TIB ?ppppip? (_EXCEPTION_REGISTRATION_RECORD)ExceptionList StackBase StackLimit SubSystemTib FiberData Version ArbitraryUserPointer (_NT_TIB)Self ; pf._NT_TIB \u003e /dev/null ; pf.", ""],
        "expected": "pf._NT_TIB ?ppppip? (_EXCEPTION_REGISTRATION_RECORD)ExceptionList StackBase StackLimit SubSystemTib FiberData Version ArbitraryUserPointer (_NT_TIB)Self\n",
        "broken": false
    }, {
        "name": "One byte enum endianness",
        "file": "malloc://1024",
        "args": "",
        "commands": ["e cfg.bigendian=true", "wb 4142434431323334", "\"td enum ascii{ LETTER_A=0x41, LETTER_D=0x44, DIGIT_1=0x31, DIGIT_4=0x34}\"", "pf.somestring [1]E[1]E[1]E[1]E[1]E[1]E[1]E[1]E (ascii)B1 (ascii)B2 (ascii)B3 (ascii)B4 (ascii)B5 (ascii)B6 (ascii)B7 (ascii)B8", "pf.somestring", ""],
        "expected": " B1 : 0x00000000 = B1 (enum ascii) = 0x41 ; LETTER_A\n B2 : 0x00000001 = B2 (enum ascii) = 0x42\n B3 : 0x00000002 = B3 (enum ascii) = 0x43\n B4 : 0x00000003 = B4 (enum ascii) = 0x44 ; LETTER_D\n B5 : 0x00000004 = B5 (enum ascii) = 0x31 ; DIGIT_1\n B6 : 0x00000005 = B6 (enum ascii) = 0x32\n B7 : 0x00000006 = B7 (enum ascii) = 0x33\n B8 : 0x00000007 = B8 (enum ascii) = 0x34 ; DIGIT_4\n",
        "broken": true
    }]
}